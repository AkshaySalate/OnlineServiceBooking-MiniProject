[
  {
      "name": "Tasty Bites Catering",
      "serviceCategory": "Caterers",
      "experience": "8 years",
      "availability": true,
      "phone": "+91 9876543210",
      "email": "tastybites@example.com"
    }, signed up successfully
    {
      "name": "Royal Feast Caterers",
      "serviceCategory": "Caterers",
      "experience": "10 years",
      "availability": true,
      "phone": "+91 9876543211",
      "email": "royalfeast@example.com"
    }, signed up successfully
    {
      "name": "Spice Delights",
      "serviceCategory": "Caterers",
      "experience": "6 years",
      "availability": true,
      "phone": "+91 9876543212",
      "email": "spicedelights@example.com"
    }, signed up successfully
    {
      "name": "Gourmet Express",
      "serviceCategory": "Caterers",
      "experience": "7 years",
      "availability": true,
      "phone": "+91 9876543213",
      "email": "gourmetexpress@example.com"
    }, signed up successfully
    {
      "name": "Flavors of India",
      "serviceCategory": "Caterers",
      "experience": "9 years",
      "availability": true,
      "phone": "+91 9876543214",
      "email": "flavorsofindia@example.com"
    }, signed up successfully
    {
      "name": "Elegant Events Decor",
      "serviceCategory": "Decorators",
      "experience": "5 years",
      "availability": true,
      "phone": "+91 9876543215",
      "email": "elegantevents@example.com"
    }, signed up successfully
    {
      "name": "Dream Theme Decor",
      "serviceCategory": "Decorators",
      "experience": "7 years",
      "availability": true,
      "phone": "+91 9876543216",
      "email": "dreamthemedecor@example.com"
    }, signed up successfully
    {
      "name": "Glamorous Touch",
      "serviceCategory": "Decorators",
      "experience": "6 years",
      "availability": true,
      "phone": "+91 9876543217",
      "email": "glamoroustouch@example.com"
    }, signed up successfully
    {
      "name": "Royal Ambience",
      "serviceCategory": "Decorators",
      "experience": "8 years",
      "availability": true,
      "phone": "+91 9876543218",
      "email": "royalambience@example.com"
    }, signed up successfully
    {
      "name": "Enchanting Designs",
      "serviceCategory": "Decorators",
      "experience": "9 years",
      "availability": true,
      "phone": "+91 9876543219",
      "email": "enchantingdesigns@example.com"
    }, signed up successfully
  {
      "name": "Pixel Perfect Photography",
      "serviceCategory": "Photographers",
      "experience": "5 years",
      "availability": true,
      "phone": "+91 9876543220",
      "email": "pixelperfect@example.com"
    }, signed up successfully
    {
      "name": "Shutter Stories",
      "serviceCategory": "Photographers",
      "experience": "8 years",
      "availability": true,
      "phone": "+91 9876543221",
      "email": "shutterstories@example.com"
    }, signed up successfully
    {
      "name": "Golden Hour Photography",
      "serviceCategory": "Photographers",
      "experience": "7 years",
      "availability": true,
      "phone": "+91 9876543222",
      "email": "goldenhour@example.com"
    }, signed up successfully
    {
      "name": "Candid Memories",
      "serviceCategory": "Photographers",
      "experience": "6 years",
      "availability": true,
      "phone": "+91 9876543223",
      "email": "candidmemories@example.com"
    }, signed up successfully
    {
      "name": "Frame by Frame",
      "serviceCategory": "Photographers",
      "experience": "9 years",
      "availability": true,
      "phone": "+91 9876543224",
      "email": "framebyframe@example.com"
    }, signed up successfully
    {
      "name": "Visionary Films",
      "serviceCategory": "Videographers",
      "experience": "6 years",
      "availability": true,
      "phone": "+91 9876543225",
      "email": "visionaryfilms@example.com"
    }, signed up successfully
    {
      "name": "Cinematic Creations",
      "serviceCategory": "Videographers",
      "experience": "10 years",
      "availability": true,
      "phone": "+91 9876543226",
      "email": "cinematiccreations@example.com"
    }, signed up successfully
    {
      "name": "Epic Moments",
      "serviceCategory": "Videographers",
      "experience": "7 years",
      "availability": true,
      "phone": "+91 9876543227",
      "email": "epicmoments@example.com"
    }, signed up successfully
    {
      "name": "Storyline Videography",
      "serviceCategory": "Videographers",
      "experience": "5 years",
      "availability": true,
      "phone": "+91 9876543228",
      "email": "storyline@example.com"
    }, signed up successfully
    {
      "name": "Timeless Motion",
      "serviceCategory": "Videographers",
      "experience": "8 years",
      "availability": true,
      "phone": "+91 9876543229",
      "email": "timelessmotion@example.com"
    }, signed up successfully
  {
      "name": "DJ Alex",
      "serviceCategory": "DJs",
      "experience": "5 years",
      "availability": true,
      "phone": "+91 9876543230",
      "email": "djalex@example.com"
    }, signed up successfully
    {
      "name": "DJ Rockstar",
      "serviceCategory": "DJs",
      "experience": "7 years",
      "availability": true,
      "phone": "+91 8765432109",
      "email": "djrockstar@example.com"
    }, signed up successfully
    {
      "name": "DJ Vibe",
      "serviceCategory": "DJs",
      "experience": "6 years",
      "availability": true,
      "phone": "+91 76543 21098",
      "email": "djvibe@example.com"
    }, signed up successfully
    {
      "name": "DJ Thunder",
      "serviceCategory": "DJs",
      "experience": "8 years",
      "availability": true,
      "phone": "+91 65432 10987",
      "email": "djthunder@example.com"
    }, signed up successfully
    {
      "name": "DJ Pulse",
      "serviceCategory": "DJs",
      "experience": "9 years",
      "availability": true,
      "phone": "+91 54321 09876",
      "email": "djpulse@example.com"
    }, signed up successfully
    {
      "name": "The Melody Makers",
      "serviceCategory": "Music Bands",
      "experience": "8 years",
      "availability": true,
      "phone": "+91 43210 98765",
      "email": "melodymakers@example.com"
    }, signed up successfully
    {
      "name": "Rock Fusion",
      "serviceCategory": "Music Bands",
      "experience": "10 years",
      "availability": true,
      "phone": "+91 32109 87654",
      "email": "rockfusion@example.com"
    }, signed up successfully
    {
      "name": "Jazz Notes",
      "serviceCategory": "Music Bands",
      "experience": "7 years",
      "availability": true,
      "phone": "+91 21098 76543",
      "email": "jazznotes@example.com"
    }, signed up successfully
    {
      "name": "Soul Harmony",
      "serviceCategory": "Music Bands",
      "experience": "6 years",
      "availability": true,
      "phone": "+91 10987 65432",
      "email": "soulharmony@example.com"
    }, signed up successfully
    {
      "name": "Epic Beats",
      "serviceCategory": "Music Bands",
      "experience": "9 years",
      "availability": true,
      "phone": "+91 09876 54321",
      "email": "epicbeats@example.com"
    }, signed up successfully
    {
      "name": "Stage Stars",
      "serviceCategory": "Event Hosts",
      "experience": "5 years",
      "availability": true,
      "phone": "+91 98765 43231",
      "email": "stagestars@example.com"
    }, signed up successfully
  {
      "name": "Grand Celebrations",
      "serviceCategory": "Party Venues & Halls",
      "experience": "15 years",
      "availability": true,
      "phone": "+91 99887 76543",
      "email": "grandcelebrations@example.com"
    }, signed up successfully
    {
      "name": "Royal Banquet Hall",
      "serviceCategory": "Party Venues & Halls",
      "experience": "12 years",
      "availability": true,
      "phone": "+91 88776 55432",
      "email": "royalbanquet@example.com"
    }, signed up successfully
    {
      "name": "The Elite Ballroom",
      "serviceCategory": "Party Venues & Halls",
      "experience": "10 years",
      "availability": true,
      "phone": "+91 77665 44321",
      "email": "eliteballroom@example.com"
    }, signed up successfully
  {
      "name": "Glam Beauty Studio",
      "serviceCategory": "Makeup Artists",
      "experience": "6 years",
      "availability": true,
      "phone": "+91 99887 11223",
      "email": "glambeautystudio@example.com"
    }, signed up successfully
    {
      "name": "Radiant Glow Makeup",
      "serviceCategory": "Makeup Artists",
      "experience": "8 years",
      "availability": true,
      "phone": "+91 88776 22334",
      "email": "radiantglow@example.com"
    }, signed up successfully
    {
      "name": "Flawless Touch",
      "serviceCategory": "Makeup Artists",
      "experience": "7 years",
      "availability": true,
      "phone": "+91 77665 33445",
      "email": "flawlesstouch@example.com"
    } signed up successfully
  {
      "name": "Luxury Transport Co.",
      "serviceCategory": "Transportation Services",
      "experience": "10 years",
      "availability": true,
      "phone": "+91 98765 43232",
      "email": "luxurytransport@example.com"
    }, signed up successfully
    {
      "name": "Elite Rides",
      "serviceCategory": "Transportation Services",
      "experience": "8 years",
      "availability": true,
      "phone": "+91 87654 32109",
      "email": "eliterides@example.com"
    }, signed up successfully
    {
      "name": "Swift Wheels",
      "serviceCategory": "Transportation Services",
      "experience": "9 years",
      "availability": true,
      "phone": "+91 76543 21098",
      "email": "swiftwheels@example.com"
    }, signed up successfully
  {
      "name": "Secure Shield",
      "serviceCategory": "Security Services",
      "experience": "12 years",
      "availability": true,
      "phone": "+91 98765 43211",
      "email": "secureshield@example.com"
    }, signed up successfully
    {
      "name": "Guardian Force",
      "serviceCategory": "Security Services",
      "experience": "10 years",
      "availability": true,
      "phone": "+91 87654 32108",
      "email": "guardianforce@example.com"
    }, signed up successfully
    {
      "name": "Titan Security",
      "serviceCategory": "Security Services",
      "experience": "9 years",
      "availability": true,
      "phone": "+91 76543 21097",
      "email": "titansecurity@example.com"
    }, signed up successfully
  {
      "name": "Elite Event Planners",
      "serviceCategory": "Event Planners",
      "experience": "8 years",
      "availability": true,
      "phone": "+91 98765 43212",
      "email": "eliteevent@example.com"
    }, signed up successfully
    {
      "name": "Grand Vision Events",
      "serviceCategory": "Event Planners",
      "experience": "10 years",
      "availability": true,
      "phone": "+91 87654 32109",
      "email": "grandvision@example.com"
    }, signed up successfully
    {
      "name": "Dream Makers",
      "serviceCategory": "Event Planners",
      "experience": "7 years",
      "availability": true,
      "phone": "+91 76543 21098",
      "email": "dreammakers@example.com"
    }, signed up successfully
  {
      "name": "Lightwave Productions",
      "serviceCategory": "Lighting & Audio",
      "experience": "9 years",
      "availability": true,
      "phone": "+91 98765 43210",
      "email": "lightwave@example.com"
    }, signed up successfully
    {
      "name": "Sound & Glow",
      "serviceCategory": "Lighting & Audio",
      "experience": "12 years",
      "availability": true,
      "phone": "+91 87654 32109",
      "email": "soundglow@example.com"
    }, signed up successfully
    {
      "name": "Bright Beats",
      "serviceCategory": "Lighting & Audio",
      "experience": "10 years",
      "availability": true,
      "phone": "+91 76543 21098",
      "email": "brightbeats@example.com"
    }, signed up successfully
  {
      "name": "Clean Crew Services",
      "serviceCategory": "Clean-Up Services",
      "experience": "5 years",
      "availability": true,
      "phone": "+91 98765 43210",
      "email": "cleancrew@example.com"
    }, signed up successfully
    {
      "name": "Sparkle Pro Cleaners",
      "serviceCategory": "Clean-Up Services",
      "experience": "7 years",
      "availability": true,
      "phone": "+91 87654 32109",
      "email": "sparklepro@example.com"
    }, signed up successfully
    {
      "name": "Neat & Tidy Experts",
      "serviceCategory": "Clean-Up Services",
      "experience": "6 years",
      "availability": true,
      "phone": "+91 76543 21098",
      "email": "neattidy@example.com"
    }, signed up successfully
  {
    "name": "Jazz Band Collective",
    "serviceCategory": "Live Performers",
    "experience": "8 years",
    "availability": true,
    "phone": "+91 123 456 7890",
    "email": "jazzbandcollective@example.com"
  }, signed up successfully
  {
    "name": "Rockin' Beats",
    "serviceCategory": "Live Performers",
    "experience": "4 years",
    "availability": true,
    "phone": "+91 987 654 3210",
    "email": "rockinbeats@example.com"
  }, signed up successfully
  {
    "name": "Elegant Invitations",
    "serviceCategory": "Invitation Designers",
    "experience": "5 years",
    "availability": true,
    "phone": "+91 234 567 8901",
    "email": "elegantinvitations@example.com"
  }, signed up successfully
  {
    "name": "Paper Dreams Designs",
    "serviceCategory": "Invitation Designers",
    "experience": "3 years",
    "availability": true,
    "phone": "+91 876 543 2109",
    "email": "paperdreams@example.com"
  }, signed up successfully
  {
    "name": "PartySnap Booths",
    "serviceCategory": "Photo Booths",
    "experience": "4 years",
    "availability": true,
    "phone": "+91 9988776655",
    "email": "partysnapbooths@example.com"
  } signed up successfully
  {
    "name": "GlamShot Booths",
    "serviceCategory": "Photo Booths",
    "experience": "6 years",
    "availability": true,
    "phone": "+91 987 654 3210",
    "email": "glamshotbooths@example.com"
  }, signed up successfully
  {
    "name": "Memorable Clicks",
    "serviceCategory": "Photo Booths",
    "experience": "5 years",
    "availability": true,
    "phone": "+91 123 456 7890",
    "email": "memorableclicks@example.com"
  }, signed up successfully
  {
    "name": "Event Rentals Co.",
    "serviceCategory": "Rentals",
    "experience": "8 years",
    "availability": true,
    "phone": "+91 876 543 2109",
    "email": "eventrentalsco@example.com"
  }, signed up successfully
  {
    "name": "Elite Event Rentals",
    "serviceCategory": "Rentals",
    "experience": "5 years",
    "availability": true,
    "phone": "+91 987 654 3210",
    "email": "eliteeventrentals@example.com"
  }, signed up successfully
  {
    "name": "Grand Party Supplies",
    "serviceCategory": "Rentals",
    "experience": "6 years",
    "availability": true,
    "phone": "+91 123 456 7890",
    "email": "grandpartysupplies@example.com"
  }, signed up successfully
  {
    "name": "Elite Bartenders",
    "serviceCategory": "Bartenders & Mixologists",
    "experience": "9 years",
    "availability": true,
    "phone": "+91 987 654 3210",
    "email": "elitebartenders@example.com"
  }, signed up successfully
  {
    "name": "Mixology Masters",
    "serviceCategory": "Bartenders & Mixologists",
    "experience": "7 years",
    "availability": true,
    "phone": "+91 876 543 2109",
    "email": "mixologymasters@example.com"
  }, signed up successfully
  {
    "name": "Cocktail Craft Experts",
    "serviceCategory": "Bartenders & Mixologists",
    "experience": "6 years",
    "availability": true,
    "phone": "+91 765 432 1098",
    "email": "cocktailcraftexperts@example.com"
  }, signed up successfully
  {
    "name": "Flair Bartenders Hub",
    "serviceCategory": "Bartenders & Mixologists",
    "experience": "8 years",
    "availability": true,
    "phone": "+91 654 321 0987",
    "email": "flairbartendershub@example.com"
  }, signed up successfully
  {
    "name": "Wedding Bliss",
    "serviceCategory": "Wedding Planners",
    "experience": "10 years",
    "availability": true,
    "phone": "+91 987 654 3210",
    "email": "weddingbliss@example.com"
  }, signed up successfully
  {
    "name": "Ever After Events",
    "serviceCategory": "Wedding Planners",
    "experience": "8 years",
    "availability": true,
    "phone": "+91 876 543 2109",
    "email": "everafterevents@example.com"
  }, signed up successfully
  {
    "name": "Royal Wedding Planners",
    "serviceCategory": "Wedding Planners",
    "experience": "12 years",
    "availability": true,
    "phone": "+91 765 432 1098",
    "email": "royalweddingplanners@example.com"
  }, signed up successfully
  {
    "name": "Charming Party Gifts",
    "serviceCategory": "Party Favors",
    "experience": "5 years",
    "availability": true,
    "phone": "+91 1112223333",
    "email": "charmingpartygifts@example.com"
  }, signed up successfully
  {
    "name": "Fabulous Favors",
    "serviceCategory": "Party Favors",
    "experience": "3 years",
    "availability": true,
    "phone": "+91 4445556666",
    "email": "fabulousfavors@example.com"
  }, signed up successfully
  {
    "name": "Delightful Party Tokens",
    "serviceCategory": "Party Favors",
    "experience": "4 years",
    "availability": true,
    "phone": "+91 7778889999",
    "email": "delightfulpartytokens@example.com"
  }, signed up successfully
  {
    "name": "Little Smiles Care",
    "serviceCategory": "Childcare Services",
    "experience": "7 years",
    "availability": true,
    "phone": "+91 1234567890",
    "email": "littlesmilescare@example.com"
  }, signed up successfully
  {
    "name": "Happy Kids Nursery",
    "serviceCategory": "Childcare Services",
    "experience": "6 years",
    "availability": true,
    "phone": "+91 2345678901",
    "email": "happykidsnursery@example.com"
  }, signed up successfully
  {
    "name": "Tiny Treasures",
    "serviceCategory": "Childcare Services",
    "experience": "8 years",
    "availability": true,
    "phone": "+91 3456789012",
    "email": "tinytreasures@example.com"
  }
]
check the full code during signup when choosed serrvice provider i want to show user a list to of servicec to chose one from it so he can choose any on eg dj or music band etc
so i have added the code to fetch all the  services from the service collection so inside service collection there is field named serviceCategory so this fileds data contains name like dj so these would be displayed in the list and when clicked the sercices document id would be passed in the service_providers collection inside the serviceCategory field and also a boolean field named availabilty would be passed with by default true value check the code if its correct

import 'package:flutter/material.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:geolocator/geolocator.dart';  // For getting location
import 'package:permission_handler/permission_handler.dart';
import 'home_page.dart';
import 'package:online_service_booking/provider/home_page.dart';
import 'dart:math';

class LoginSignupPage extends StatefulWidget {
  @override
  _LoginSignupPageState createState() => _LoginSignupPageState();
}

class _LoginSignupPageState extends State<LoginSignupPage> {
  final Random random = Random();
  bool _obscurePassword = true;
  bool isLogin = true;
  final TextEditingController emailController = TextEditingController();
  final TextEditingController passwordController = TextEditingController();
  final TextEditingController nameController = TextEditingController();
  final TextEditingController phoneController = TextEditingController();
  final TextEditingController servicesController = TextEditingController();  // For service providers

  String role = "customer"; // Default role selection
  Position? currentLocation;

  final FirebaseAuth _auth = FirebaseAuth.instance;
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;

  // 🔹 Function to Get Current Location
  Future<void> getCurrentLocation() async {
    try {
      // Check and request permission
      LocationPermission permission = await Geolocator.checkPermission();
      if (permission == LocationPermission.denied) {
        permission = await Geolocator.requestPermission();
        if (permission == LocationPermission.denied) {
          print("❌ Location permission denied by user.");
          return;
        }
      }

      if (permission == LocationPermission.deniedForever) {
        print("⚠️ Location permission permanently denied. Go to app settings to enable it.");
        return;
      }

      print("✅ Location permission granted! Fetching location...");

      Position position = await Geolocator.getCurrentPosition(
        desiredAccuracy: LocationAccuracy.high,
      );

      currentLocation = position;
      print("📍 Location obtained: ${position.latitude}, ${position.longitude}");

    } catch (e) {
      print("⚠️ Error fetching location: $e");
      currentLocation = null; // Handle location failure
    }
  }

  // 🔹 Function to Handle Login
  Future<void> login() async {
    try {
      UserCredential userCredential = await _auth.signInWithEmailAndPassword(
        email: emailController.text.trim(),
        password: passwordController.text.trim(),
      );
      print("User logged in: ${_auth.currentUser!.uid}");

      String userId = userCredential.user!.uid;

      // Try fetching from 'users' collection first
      DocumentSnapshot userDoc = await _firestore.collection("users").doc(userId).get();

      if (userDoc.exists) {
        String userRole = userDoc.get('role');
        Navigator.pushReplacement(
          context,
          MaterialPageRoute(builder: (context) => HomePage(customerId: userId)),
        );
      } else {
        // If not found in 'users', check 'service_providers'
        DocumentSnapshot providerDoc = await _firestore.collection("service_providers").doc(userId).get();
        if (providerDoc.exists) {
          String userRole = providerDoc.get('role');
          Navigator.pushReplacement(
            context,
            MaterialPageRoute(builder: (context) => ServiceProviderHomePage(providerId: userId)),
          );
        } else {
          print("Login Error: No matching user found.");
        }
      }
    } catch (e) {
      print("Login Error: $e");
    }
  }


  // 🔹 Function to Handle Sign-Up
  Future<void> signUp() async {
    try {
      if (role == "service_provider") {
        print("Checking location permission before sign-up...");
        await getCurrentLocation();
        if (currentLocation == null) {
          print("⚠️ No location obtained! Defaulting to 0,0.");
        }
      }

      UserCredential userCredential = await _auth.createUserWithEmailAndPassword(
        email: emailController.text.trim(),
        password: passwordController.text.trim(),
      );

      String userId = userCredential.user!.uid;

      if (role == "service_provider") {
        // Store service provider details in `service_providers`
        await _firestore.collection("service_providers").doc(userId).set({
          "name": nameController.text.trim(),
          "email": emailController.text.trim(),
          "phone": phoneController.text.trim(),
          "role": role,
          "location": currentLocation != null
              ? GeoPoint(currentLocation!.latitude, currentLocation!.longitude)
              : GeoPoint(0.0, 0.0),
          "services_offered": servicesController.text.trim().split(","),
        });
      } else {
        // Store customer details in `users`
        await _firestore.collection("users").doc(userId).set({
          "name": nameController.text.trim(),
          "email": emailController.text.trim(),
          "phone": phoneController.text.trim(),
          "role": role, // Ensures role is stored
          "location": currentLocation != null
              ? GeoPoint(currentLocation!.latitude, currentLocation!.longitude)
              : GeoPoint(0.0, 0.0)
        });
      }

      print("✅ User signed up successfully: $userId");

    } catch (e) {
      print("❌ Sign-up Error: $e");
    }
  }




  @override
  void initState() {
    super.initState();
    if (role == "service_provider") {
      // Get current location when user chooses service provider
      getCurrentLocation();
    }
  }

  // List of icons to choose from
  final List<IconData> iconList = [
    Icons.local_florist,
    Icons.eco,
    Icons.ac_unit,
    Icons.local_florist_sharp,
    //Icons.star,
    //Icons.favorite,
    //Icons.cloud,
  ];


  // Generates a random Positioned icon
  Positioned randomIcon(double screenWidth, double screenHeight) {
    double left = random.nextDouble() * (screenWidth - 50); // Random left within bounds
    double top = random.nextDouble() * (screenHeight - 50); // Random top within bounds
    double size = 20 + random.nextDouble() * 40; // Size between 20 and 60
    IconData icon = iconList[random.nextInt(iconList.length)]; // Random icon

    return Positioned(
      left: left,
      top: top,
      child: Icon(icon, color: Colors.red.shade200, size: size),
    );
  }

  // Generates icons in a structured yet dynamic layout
  // Generates randomly scattered icons across the screen
  List<Widget> generateScatteredIcons(double screenWidth, double screenHeight) {
    List<Widget> iconWidgets = [];
    int iconCount = 12; // Adjusted for a well-spread layout

    for (int i = 0; i < iconCount; i++) {
      double left = random.nextDouble() * screenWidth;
      double top = random.nextDouble() * screenHeight;

      double iconSize = 30 + random.nextDouble() * 60; // Sizes between 30-70
      IconData icon = iconList[random.nextInt(iconList.length)];

      iconWidgets.add(
        Positioned(
          left: left.clamp(0, screenWidth - iconSize),
          top: top.clamp(0, screenHeight - iconSize),
          child: Icon(icon, color: Colors.red.shade200, size: iconSize),
        ),
      );
    }

    return iconWidgets;
  }

  @override
  Widget build(BuildContext context) {
    double screenWidth = MediaQuery.of(context).size.width;
    double screenHeight = MediaQuery.of(context).size.height;
    List<Widget> generateIcons() {
      return [
        Positioned(
          top: screenHeight * 0.05,
          left: screenWidth * 0.08,
          child: Icon(Icons.local_florist, color: Colors.red.shade200, size: screenWidth * 0.17),
        ),
        Positioned(
          top: screenHeight * 0.10,
          right: screenWidth * 0.12,
          child: Icon(Icons.eco, color: Colors.red.shade200, size: screenWidth * 0.10),
        ),
        Positioned(
          top: screenHeight * 0.22,
          left: screenWidth * 0.25,
          child: Icon(Icons.eco, color: Colors.red.shade200, size: screenWidth * 0.08),
        ),
        Positioned(
          top: screenHeight * 0.25,
          right: screenWidth * 0.15,
          child: Icon(Icons.local_florist_sharp, color: Colors.red.shade200, size: screenWidth * 0.19),
        ),
        Positioned(
          bottom: screenHeight * 0.12,
          left: screenWidth * 0.35,
          child: Icon(Icons.local_florist, color: Colors.red.shade200, size: screenWidth * 0.20),
        ),
        Positioned(
          bottom: screenHeight * 0.12,
          right: screenWidth * 0.10,
          child: Icon(Icons.eco, color: Colors.red.shade200, size: screenWidth * 0.08),
        ),
        Positioned(
          bottom: screenHeight * 0.25,
          left: screenWidth * 0.05,
          child: Icon(Icons.local_florist, color: Colors.red.shade200, size: screenWidth * 0.07),
        ),
        Positioned(
          bottom: screenHeight * 0.27,
          right: screenWidth * 0.10,
          child: Icon(Icons.local_florist, color: Colors.red.shade200, size: screenWidth * 0.2),
        ),
        Positioned(
          top: screenHeight * 0.40,
          left: screenWidth * 0.50,
          child: Icon(Icons.eco, color: Colors.red.shade200, size: screenWidth * 0.09),
        ),
        Positioned(
          bottom: screenHeight * 0.40,
          left: screenWidth * 0.150,
          child: Icon(Icons.eco, color: Colors.red.shade200, size: screenWidth * 0.25),
        ),
      ];
    }

    return Scaffold(
      body: Container(
        decoration: BoxDecoration(
          gradient: RadialGradient(
            center: Alignment.center,
            radius: 0.5,
            colors: [
              Colors.red.shade300,
              Colors.red.shade500,
              Colors.red.shade700,
              Colors.red.shade900,
            ],
            stops: [0.01, 0.4, 0.7, 1.0],
          ),
        ),
        child: Stack(
          children: [
            /*
            // Randomly positioned icons with different sizes
            Positioned(
              top: 50,
              left: 30,
              child: Icon(Icons.local_florist, color: Colors.red.shade200, size: 20 + (30 * 1).toDouble()),
            ),
            Positioned(
              top: 150,
              right: 30,
              child: Icon(Icons.eco, color: Colors.red.shade200, size: 20 + (30 * 2).toDouble()),
            ),
            Positioned(
              bottom: 100,
              left: 80,
              child: Icon(Icons.local_florist, color: Colors.red.shade200, size: 20 + (30 * 1.5).toDouble()),
            ),
            Positioned(
              bottom: 180,
              right: 80,
              child: Icon(Icons.eco, color: Colors.red.shade200, size: 20 + (30 * 0.8).toDouble()),
            ),
            Positioned(
              top: 100,
              left: 150,
              child: Icon(Icons.local_florist, color: Colors.red.shade200, size: 20 + (30 * 1.2).toDouble()),
            ),
            Positioned(
              top: 200,
              left: 200,
              child: Icon(Icons.eco, color: Colors.red.shade200, size: 20 + (30 * 1.5).toDouble()),
            ),
            Positioned(
              bottom: 50,
              right: 150,
              child: Icon(Icons.local_florist, color: Colors.red.shade200, size: 20 + (30 * 1.1).toDouble()),
            ),
            Positioned(
              top: 250,
              left: 250,
              child: Icon(Icons.eco, color: Colors.red.shade200, size: 20 + (30 * 0.9).toDouble()),
            ),
            Positioned(
              bottom: 250,
              right: 250,
              child: Icon(Icons.eco, color: Colors.red.shade200, size: 20 + (30 * 1.3).toDouble()),
            ),*/

            // Generate 10 random icons
            //...List.generate(20, (_) => randomIcon(screenWidth, screenHeight,)),
            // Generate a grid of icons
            //...generateScatteredIcons(screenWidth, screenHeight),
            ...generateIcons(),
            Center(
              child: SingleChildScrollView(
                child: Column(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    Container(
                      padding: EdgeInsets.all(20),
                      width: MediaQuery.of(context).size.width * 0.8, // 80% of screen width
                      constraints: BoxConstraints(maxWidth: 400), // Ensures it's not too wide on larger screens
                      decoration: BoxDecoration(
                        color: Colors.grey.shade300.withOpacity(0.2), // Container background color
                        borderRadius: BorderRadius.circular(20),
                        border: Border.all(color: Colors.white.withOpacity(0.3), width: 0.5), // Soft white border
                        boxShadow: [
                          BoxShadow(
                            color: Colors.black.withOpacity(0.1),
                            blurRadius: 10,
                            spreadRadius: 3,
                            offset: Offset(3, 3), // 3D depth effect
                          ),
                        ],
                      ),

                      child: Column(
                        children: [
                          Text(isLogin ? "Login" : "Sign Up", style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold, color: Colors.white)),
                          SizedBox(height: 20),

                          // Show Name & Phone field only for Sign-Up
                          if (!isLogin)
                            Column(
                              children: [
                                TextField(
                                  controller: nameController,
                                  decoration: InputDecoration(labelText: "Full Name", labelStyle: TextStyle(color: Colors.white)),
                                  style: TextStyle(color: Colors.white),
                                ),
                                TextField(
                                  controller: phoneController,
                                  decoration: InputDecoration(labelText: "Phone", labelStyle: TextStyle(color: Colors.white)),
                                  style: TextStyle(color: Colors.white),
                                ),
                              ],
                            ),

                          TextField(
                            controller: emailController,
                            decoration: InputDecoration(labelText: "Email", labelStyle: TextStyle(color: Colors.white)),
                            style: TextStyle(color: Colors.white),
                          ),
                          TextField(
                            controller: passwordController,
                            decoration: InputDecoration(
                              labelText: "Password",
                              labelStyle: TextStyle(color: Colors.white),
                              suffixIcon: IconButton(
                                icon: Icon(_obscurePassword ? Icons.visibility : Icons.visibility_off, color: Colors.white),
                                onPressed: () {
                                  setState(() {
                                    _obscurePassword = !_obscurePassword;
                                  });
                                },
                              ),
                            ),
                            obscureText: _obscurePassword,
                            style: TextStyle(color: Colors.white),
                          ),

                          // Show Role Selection for Sign-Up
                          if (!isLogin)
                            DropdownButton<String>(
                              value: role,
                              items: ["customer", "service_provider"].map((role) {
                                return DropdownMenuItem(value: role, child: Text(role, style: TextStyle(color: Colors.white)));
                              }).toList(),
                              onChanged: (value) {
                                setState(() {
                                  role = value!;
                                });
                              },
                              dropdownColor: Colors.red.shade800,
                            ),

                          // Show Location and Services Offered only for Service Provider
                          if (role == "service_provider")
                            Column(
                              children: [
                                currentLocation == null
                                    ? CircularProgressIndicator()  // Show loading while fetching location
                                    : Text("Location: Latitude ${currentLocation?.latitude}, Longitude ${currentLocation?.longitude}", style: TextStyle(color: Colors.white)),
                                TextField(
                                  controller: servicesController,
                                  decoration: InputDecoration(labelText: "Services Offered (comma separated)", labelStyle: TextStyle(color: Colors.white)),
                                  style: TextStyle(color: Colors.white),
                                ),
                              ],
                            ),
                          SizedBox(height: 20),
                          ElevatedButton(
                            onPressed: () {
                              isLogin ? login() : signUp();
                            },
                            child: Text(
                              isLogin ? "Login" : "Sign Up",
                              style: TextStyle(color: Colors.black), // Text color set to white
                            ),
                            style: ElevatedButton.styleFrom(
                              backgroundColor: Color(0xFFF8CB20),
                              minimumSize: Size(MediaQuery.of(context).size.width * 0.6, 45),
                              shape: RoundedRectangleBorder(
                                borderRadius: BorderRadius.circular(20), // Reduced corner radius
                              ),
                            ),
                          ),

                          SizedBox(height: 10),  // Added spacing for better visual appearance
                        ],
                      ),
                    ),
                    // "Create an account" / "Already have an account?" button outside of the container
                    TextButton(
                      onPressed: () {
                        setState(() {
                          isLogin = !isLogin;
                        });
                      },
                      child: Text(
                        isLogin ? "Create an account" : "Already have an account? Login",
                        style: TextStyle(color: Colors.white),
                      ),
                    ),
                  ],
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
}
add a drop drop down button or any other method in sign up when service provider is choosed  so ther provider can choose any one category so the data listed in the category list would be fetched from services collection from the serviceCategory each document id has one category like dj, music band so serviceCategory content will be listed and after a service category is selected that categories document id would be uploaded in the service_providers collection in serviceCategory files hope so you understood now modify the full code please